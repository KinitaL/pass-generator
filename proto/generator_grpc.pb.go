// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PassGeneratorClient is the client API for PassGenerator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PassGeneratorClient interface {
	Generate(ctx context.Context, in *GenRequest, opts ...grpc.CallOption) (*GenResponse, error)
}

type passGeneratorClient struct {
	cc grpc.ClientConnInterface
}

func NewPassGeneratorClient(cc grpc.ClientConnInterface) PassGeneratorClient {
	return &passGeneratorClient{cc}
}

func (c *passGeneratorClient) Generate(ctx context.Context, in *GenRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/PassGenerator/Generate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PassGeneratorServer is the server API for PassGenerator service.
// All implementations should embed UnimplementedPassGeneratorServer
// for forward compatibility
type PassGeneratorServer interface {
	Generate(context.Context, *GenRequest) (*GenResponse, error)
}

// UnimplementedPassGeneratorServer should be embedded to have forward compatible implementations.
type UnimplementedPassGeneratorServer struct {
}

func (UnimplementedPassGeneratorServer) Generate(context.Context, *GenRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Generate not implemented")
}

// UnsafePassGeneratorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PassGeneratorServer will
// result in compilation errors.
type UnsafePassGeneratorServer interface {
	mustEmbedUnimplementedPassGeneratorServer()
}

func RegisterPassGeneratorServer(s grpc.ServiceRegistrar, srv PassGeneratorServer) {
	s.RegisterService(&PassGenerator_ServiceDesc, srv)
}

func _PassGenerator_Generate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassGeneratorServer).Generate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PassGenerator/Generate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassGeneratorServer).Generate(ctx, req.(*GenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PassGenerator_ServiceDesc is the grpc.ServiceDesc for PassGenerator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PassGenerator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PassGenerator",
	HandlerType: (*PassGeneratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Generate",
			Handler:    _PassGenerator_Generate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "generator.proto",
}
